{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FormIt2db/db2FormIt FormIt hooks for saving/retreiving xPDO objects. Requirements MODX Revolution 2.6+ PHP v5.6+ Features Save xPDO objects during FormIt posts. Retreive xPDO objects before displaying FormIt forms.","title":"Description"},{"location":"#formit2dbdb2formit","text":"FormIt hooks for saving/retreiving xPDO objects.","title":"FormIt2db/db2FormIt"},{"location":"#requirements","text":"MODX Revolution 2.6+ PHP v5.6+","title":"Requirements"},{"location":"#features","text":"Save xPDO objects during FormIt posts. Retreive xPDO objects before displaying FormIt forms.","title":"Features"},{"location":"installation/","text":"Install from MODX Extras Search for FormIt2db in the Package Manager of your MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install FormIt2db. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. FormIt2db should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of FormIt2db contains a config.json to build that package locally. Use this option, if you want to debug FormIt2db and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for FormIt2db in the Package Manager of your MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install FormIt2db. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. FormIt2db should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of FormIt2db contains a config.json to build that package locally. Use this option, if you want to debug FormIt2db and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"How it works The FormIt hooks 1 could use the following properties: Hook Properties for FormIt2db Property Description Default prefix Table prefix of the xPDO package MODX DB prefix packagename Package name of the xPDO object - classname Class name of the xPDO object - tablename Table name of the autocreated xPDO Package - where JSON encoded xPDO where clause - to update a row instead of creating a new one - paramname Requested POST param - to update a row instead of creating a new one - fieldname xPDO fieldname the POST param is compared with - to update a row instead of creating a new one 'paramname' arrayFormat Format to transform form fields that contains array data (i.e. checkboxes) into csv arrayFields JSON encoded array of form fields that contains array data [] removeFields JSON encoded array of form fields not saved in the xPDO object [] autoPackage Use the autocreated xPDO Package 2 false Hook Properties for db2FormIt Property Description Default prefix Table prefix of the xPDO package MODX DB prefix packagename Package name of the xPDO object - classname Class name of the xPDO object - tablename Table name for autocreation of the xPDO Package - where JSON encoded xPDO where clause - to retreive an existing row - paramname Requested REQUEST param - to retreive an existing row - fieldname xPDO fieldname the REQUEST param is compared 'paramname' with - to retreive an existing row. arrayFormat Format to transform database fields that csv contains array data (i.e. checkboxes) into. arrayFields JSON encoded array of database fields that [] are transformed into arrays. ignoreFields JSON encoded array of database fields that [] are not retreived into FormIt. notFoundRedirect ID of the MODX resource the user is 0 redirected to, if the requested row is not found. autoPackage Autocreate the xPDO Package with packagename and tablename 2 . false Notes The snippets bases on the code in the following thread in MODX forum https://forums.modx.com/thread/32560/formit2db-with-autocreate-schema-classes \u21a9 If the xPDO package is autocreated, the classname in the package is generated by MODX and could be different to a classname set by parameter. If you disable the autoPackage parameter later, please look which classname was generated and change the parameter to that value. \u21a9 \u21a9","title":"Usage"},{"location":"usage/#how-it-works","text":"The FormIt hooks 1 could use the following properties:","title":"How it works"},{"location":"usage/#hook-properties-for-formit2db","text":"Property Description Default prefix Table prefix of the xPDO package MODX DB prefix packagename Package name of the xPDO object - classname Class name of the xPDO object - tablename Table name of the autocreated xPDO Package - where JSON encoded xPDO where clause - to update a row instead of creating a new one - paramname Requested POST param - to update a row instead of creating a new one - fieldname xPDO fieldname the POST param is compared with - to update a row instead of creating a new one 'paramname' arrayFormat Format to transform form fields that contains array data (i.e. checkboxes) into csv arrayFields JSON encoded array of form fields that contains array data [] removeFields JSON encoded array of form fields not saved in the xPDO object [] autoPackage Use the autocreated xPDO Package 2 false","title":"Hook Properties for FormIt2db"},{"location":"usage/#hook-properties-for-db2formit","text":"Property Description Default prefix Table prefix of the xPDO package MODX DB prefix packagename Package name of the xPDO object - classname Class name of the xPDO object - tablename Table name for autocreation of the xPDO Package - where JSON encoded xPDO where clause - to retreive an existing row - paramname Requested REQUEST param - to retreive an existing row - fieldname xPDO fieldname the REQUEST param is compared 'paramname' with - to retreive an existing row. arrayFormat Format to transform database fields that csv contains array data (i.e. checkboxes) into. arrayFields JSON encoded array of database fields that [] are transformed into arrays. ignoreFields JSON encoded array of database fields that [] are not retreived into FormIt. notFoundRedirect ID of the MODX resource the user is 0 redirected to, if the requested row is not found. autoPackage Autocreate the xPDO Package with packagename and tablename 2 . false","title":"Hook Properties for db2FormIt"},{"location":"usage/#notes","text":"The snippets bases on the code in the following thread in MODX forum https://forums.modx.com/thread/32560/formit2db-with-autocreate-schema-classes \u21a9 If the xPDO package is autocreated, the classname in the package is generated by MODX and could be different to a classname set by parameter. If you disable the autoPackage parameter later, please look which classname was generated and change the parameter to that value. \u21a9 \u21a9","title":"Notes"}]}